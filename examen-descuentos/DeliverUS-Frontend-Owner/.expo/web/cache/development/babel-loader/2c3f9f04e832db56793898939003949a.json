{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as ExpoImagePicker from 'expo-image-picker';\nimport * as yup from 'yup';\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport { update, getRestaurantCategories, getDetail } from \"../../api/RestaurantEndpoints\";\nimport InputItem from \"../../components/InputItem\";\nimport TextRegular from \"../../components/TextRegular\";\nimport * as GlobalStyles from \"../../styles/GlobalStyles\";\nimport restaurantLogo from \"../../../assets/restaurantLogo.jpeg\";\nimport restaurantBackground from \"../../../assets/restaurantBackground.jpeg\";\nimport { showMessage } from 'react-native-flash-message';\nimport { ErrorMessage, Formik } from 'formik';\nimport TextError from \"../../components/TextError\";\nimport { prepareEntityImages } from \"../../api/helpers/FileUploadHelper\";\nimport { buildInitialValues } from \"../Helper\";\nimport ConfirmationModal from \"../../components/ConfirmationModal\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport TextSemiBold from \"../../components/TextSemibold\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function EditRestaurantScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    open = _useState2[0],\n    setOpen = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    restaurantCategories = _useState4[0],\n    setRestaurantCategories = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    backendErrors = _useState6[0],\n    setBackendErrors = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    percentageShowDialog = _useState8[0],\n    setPercentageShowDialog = _useState8[1];\n  var _useState9 = useState({}),\n    _useState10 = _slicedToArray(_useState9, 2),\n    restaurant = _useState10[0],\n    setRestaurant = _useState10[1];\n  var _useState11 = useState({\n      name: null,\n      description: null,\n      address: null,\n      postalCode: null,\n      url: null,\n      shippingCosts: null,\n      email: null,\n      phone: null,\n      restaurantCategoryId: null,\n      logo: null,\n      heroImage: null,\n      percentage: 0\n    }),\n    _useState12 = _slicedToArray(_useState11, 2),\n    initialRestaurantValues = _useState12[0],\n    setInitialRestaurantValues = _useState12[1];\n  var validationSchema = yup.object().shape({\n    name: yup.string().max(255, 'Name too long').required('Name is required'),\n    address: yup.string().max(255, 'Address too long').required('Address is required'),\n    postalCode: yup.string().max(255, 'Postal code too long').required('Postal code is required'),\n    url: yup.string().nullable().url('Please enter a valid url'),\n    shippingCosts: yup.number().positive('Please provide a valid shipping cost value').required('Shipping costs value is required'),\n    email: yup.string().nullable().email('Please enter a valid email'),\n    phone: yup.string().nullable().max(255, 'Phone too long'),\n    restaurantCategoryId: yup.number().positive().integer().required('Restaurant category is required'),\n    percentage: yup.number().max(5).min(-5)\n  });\n  useEffect(function () {\n    function fetchRestaurantDetail() {\n      return _fetchRestaurantDetail.apply(this, arguments);\n    }\n    function _fetchRestaurantDetail() {\n      _fetchRestaurantDetail = _asyncToGenerator(function* () {\n        try {\n          var fetchedRestaurant = yield getDetail(route.params.id);\n          var preparedRestaurant = prepareEntityImages(fetchedRestaurant, ['logo', 'heroImage']);\n          setRestaurant(preparedRestaurant);\n          var initialValues = buildInitialValues(preparedRestaurant, initialRestaurantValues);\n          setInitialRestaurantValues(initialValues);\n        } catch (error) {\n          showMessage({\n            message: \"There was an error while retrieving restaurant details (id \" + route.params.id + \"). \" + error,\n            type: 'error',\n            style: GlobalStyles.flashStyle,\n            titleStyle: GlobalStyles.flashTextStyle\n          });\n        }\n      });\n      return _fetchRestaurantDetail.apply(this, arguments);\n    }\n    fetchRestaurantDetail();\n  }, [route]);\n  useEffect(function () {\n    function fetchRestaurantCategories() {\n      return _fetchRestaurantCategories.apply(this, arguments);\n    }\n    function _fetchRestaurantCategories() {\n      _fetchRestaurantCategories = _asyncToGenerator(function* () {\n        try {\n          var fetchedRestaurantCategories = yield getRestaurantCategories();\n          var fetchedRestaurantCategoriesReshaped = fetchedRestaurantCategories.map(function (e) {\n            return {\n              label: e.name,\n              value: e.id\n            };\n          });\n          setRestaurantCategories(fetchedRestaurantCategoriesReshaped);\n        } catch (error) {\n          showMessage({\n            message: \"There was an error while retrieving restaurant categories. \" + error + \" \",\n            type: 'error',\n            style: GlobalStyles.flashStyle,\n            titleStyle: GlobalStyles.flashTextStyle\n          });\n        }\n      });\n      return _fetchRestaurantCategories.apply(this, arguments);\n    }\n    fetchRestaurantCategories();\n  }, []);\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      if (Platform.OS !== 'web') {\n        var _yield$ExpoImagePicke = yield ExpoImagePicker.requestMediaLibraryPermissionsAsync(),\n          status = _yield$ExpoImagePicke.status;\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n  var pickImage = function () {\n    var _ref3 = _asyncToGenerator(function* (onSuccess) {\n      var result = yield ExpoImagePicker.launchImageLibraryAsync({\n        mediaTypes: ExpoImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 1\n      });\n      if (!result.canceled) {\n        if (onSuccess) {\n          onSuccess(result);\n        }\n      }\n    });\n    return function pickImage(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var updateRestaurant = function () {\n    var _ref4 = _asyncToGenerator(function* (values) {\n      setBackendErrors([]);\n      if (values.percentage > 0 && !percentageShowDialog) {\n        setPercentageShowDialog(true);\n      } else {\n        setPercentageShowDialog(false);\n        try {\n          var updatedRestaurant = yield update(restaurant.id, values);\n          showMessage({\n            message: \"Restaurant \" + updatedRestaurant.name + \" succesfully updated\",\n            type: 'success',\n            style: GlobalStyles.flashStyle,\n            titleStyle: GlobalStyles.flashTextStyle\n          });\n          navigation.navigate('RestaurantsScreen', {\n            dirty: true\n          });\n        } catch (error) {\n          console.log(error);\n          setBackendErrors(error.errors);\n        }\n      }\n    });\n    return function updateRestaurant(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsx(Formik, {\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    initialValues: initialRestaurantValues,\n    onSubmit: updateRestaurant,\n    children: function children(_ref5) {\n      var handleSubmit = _ref5.handleSubmit,\n        setFieldValue = _ref5.setFieldValue,\n        values = _ref5.values;\n      return _jsxs(ScrollView, {\n        children: [_jsx(View, {\n          style: {\n            alignItems: 'center'\n          },\n          children: _jsxs(View, {\n            style: {\n              width: '60%'\n            },\n            children: [_jsx(InputItem, {\n              name: \"name\",\n              label: \"Name:\"\n            }), _jsx(InputItem, {\n              name: \"description\",\n              label: \"Description:\"\n            }), _jsx(InputItem, {\n              name: \"address\",\n              label: \"Address:\"\n            }), _jsx(InputItem, {\n              name: \"postalCode\",\n              label: \"Postal code:\"\n            }), _jsx(InputItem, {\n              name: \"url\",\n              label: \"Url:\"\n            }), _jsx(InputItem, {\n              name: \"shippingCosts\",\n              label: \"Shipping costs:\"\n            }), _jsxs(View, {\n              style: {\n                flexDirection: 'row',\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginTop: 10,\n                marginBottom: 10\n              },\n              children: [_jsx(Pressable, {\n                onPress: function onPress() {\n                  setFieldValue('percentage', values.percentage + 0.005);\n                },\n                children: _jsx(MaterialCommunityIcons, {\n                  name: 'arrow-up-circle',\n                  color: GlobalStyles.brandSecondaryTap,\n                  size: 24\n                })\n              }), _jsxs(TextSemiBold, {\n                children: [\"Porcentaje actual: \", _jsxs(TextSemiBold, {\n                  textStyle: {\n                    color: GlobalStyles.brandPrimary\n                  },\n                  children: [values.percentage * 100.0, \"%\"]\n                })]\n              }), _jsx(Pressable, {\n                onPress: function onPress() {\n                  setFieldValue('percentage', values.percentage - 0.005);\n                },\n                children: _jsx(MaterialCommunityIcons, {\n                  name: 'arrow-down-circle',\n                  color: GlobalStyles.brandSecondaryTap,\n                  size: 24\n                })\n              })]\n            }), _jsx(InputItem, {\n              name: \"email\",\n              label: \"Email:\"\n            }), _jsx(InputItem, {\n              name: \"phone\",\n              label: \"Phone:\"\n            }), _jsx(DropDownPicker, {\n              open: open,\n              value: values.restaurantCategoryId,\n              items: restaurantCategories,\n              setOpen: setOpen,\n              onSelectItem: function onSelectItem(item) {\n                setFieldValue('restaurantCategoryId', item.value);\n              },\n              setItems: setRestaurantCategories,\n              placeholder: \"Select the restaurant category\",\n              containerStyle: {\n                height: 40,\n                marginTop: 20\n              },\n              style: {\n                backgroundColor: GlobalStyles.brandBackground\n              },\n              dropDownStyle: {\n                backgroundColor: '#fafafa'\n              }\n            }), _jsx(ErrorMessage, {\n              name: 'restaurantCategoryId',\n              render: function render(msg) {\n                return _jsx(TextError, {\n                  children: msg\n                });\n              }\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return pickImage(function () {\n                  var _ref6 = _asyncToGenerator(function* (result) {\n                    yield setFieldValue('logo', result);\n                  });\n                  return function (_x3) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }());\n              },\n              style: styles.imagePicker,\n              children: [_jsx(TextRegular, {\n                children: \"Logo: \"\n              }), _jsx(Image, {\n                style: styles.image,\n                source: values.logo ? {\n                  uri: values.logo.assets[0].uri\n                } : restaurantLogo\n              })]\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return pickImage(function () {\n                  var _ref7 = _asyncToGenerator(function* (result) {\n                    yield setFieldValue('heroImage', result);\n                  });\n                  return function (_x4) {\n                    return _ref7.apply(this, arguments);\n                  };\n                }());\n              },\n              style: styles.imagePicker,\n              children: [_jsx(TextRegular, {\n                children: \"Hero image: \"\n              }), _jsx(Image, {\n                style: styles.image,\n                source: values.heroImage ? {\n                  uri: values.heroImage.assets[0].uri\n                } : restaurantBackground\n              })]\n            }), backendErrors && backendErrors.map(function (error, index) {\n              return _jsxs(TextError, {\n                children: [error.param, \"-\", error.msg]\n              }, index);\n            }), _jsx(Pressable, {\n              onPress: handleSubmit,\n              style: function style(_ref8) {\n                var pressed = _ref8.pressed;\n                return [{\n                  backgroundColor: pressed ? GlobalStyles.brandSuccessTap : GlobalStyles.brandSuccess\n                }, styles.button];\n              },\n              children: _jsxs(View, {\n                style: [{\n                  flex: 1,\n                  flexDirection: 'row',\n                  justifyContent: 'center'\n                }],\n                children: [_jsx(MaterialCommunityIcons, {\n                  name: \"content-save\",\n                  color: 'white',\n                  size: 20\n                }), _jsx(TextRegular, {\n                  textStyle: styles.text,\n                  children: \"Save\"\n                })]\n              })\n            })]\n          })\n        }), _jsx(ConfirmationModal, {\n          isVisible: percentageShowDialog,\n          onCancel: function onCancel() {\n            return setPercentageShowDialog(false);\n          },\n          onConfirm: function onConfirm() {\n            return updateRestaurant(values);\n          }\n        })]\n      });\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  button: {\n    borderRadius: 8,\n    height: 40,\n    padding: 10,\n    width: '100%',\n    marginTop: 20,\n    marginBottom: 20\n  },\n  text: {\n    fontSize: 16,\n    color: 'white',\n    textAlign: 'center',\n    marginLeft: 5\n  },\n  imagePicker: {\n    height: 40,\n    paddingLeft: 10,\n    marginTop: 20,\n    marginBottom: 80\n  },\n  image: {\n    width: 100,\n    height: 100,\n    borderWidth: 1,\n    alignSelf: 'center',\n    marginTop: 5\n  }\n});","map":{"version":3,"names":["React","useEffect","useState","ExpoImagePicker","yup","DropDownPicker","update","getRestaurantCategories","getDetail","InputItem","TextRegular","GlobalStyles","restaurantLogo","restaurantBackground","showMessage","ErrorMessage","Formik","TextError","prepareEntityImages","buildInitialValues","ConfirmationModal","MaterialCommunityIcons","TextSemiBold","EditRestaurantScreen","navigation","route","open","setOpen","restaurantCategories","setRestaurantCategories","backendErrors","setBackendErrors","percentageShowDialog","setPercentageShowDialog","restaurant","setRestaurant","name","description","address","postalCode","url","shippingCosts","email","phone","restaurantCategoryId","logo","heroImage","percentage","initialRestaurantValues","setInitialRestaurantValues","validationSchema","object","shape","string","max","required","nullable","number","positive","integer","min","fetchRestaurantDetail","fetchedRestaurant","params","id","preparedRestaurant","initialValues","error","message","type","style","flashStyle","titleStyle","flashTextStyle","fetchRestaurantCategories","fetchedRestaurantCategories","fetchedRestaurantCategoriesReshaped","map","e","label","value","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","onSuccess","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","canceled","updateRestaurant","values","updatedRestaurant","navigate","dirty","console","log","errors","handleSubmit","setFieldValue","alignItems","width","flexDirection","justifyContent","marginTop","marginBottom","brandSecondaryTap","color","brandPrimary","item","height","backgroundColor","brandBackground","msg","styles","imagePicker","image","uri","assets","index","param","pressed","brandSuccessTap","brandSuccess","button","flex","text","StyleSheet","create","borderRadius","padding","fontSize","textAlign","marginLeft","paddingLeft","borderWidth","alignSelf"],"sources":["/Users/luismi/Proyectos/Examenes/DeliverUS-Frontend-Owner/src/screens/restaurants/EditRestaurantScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Image, Platform, Pressable, ScrollView, StyleSheet, View } from 'react-native'\nimport * as ExpoImagePicker from 'expo-image-picker'\nimport * as yup from 'yup'\nimport DropDownPicker from 'react-native-dropdown-picker'\nimport { update, getRestaurantCategories, getDetail } from '../../api/RestaurantEndpoints'\nimport InputItem from '../../components/InputItem'\nimport TextRegular from '../../components/TextRegular'\nimport * as GlobalStyles from '../../styles/GlobalStyles'\nimport restaurantLogo from '../../../assets/restaurantLogo.jpeg'\nimport restaurantBackground from '../../../assets/restaurantBackground.jpeg'\nimport { showMessage } from 'react-native-flash-message'\nimport { ErrorMessage, Formik } from 'formik'\nimport TextError from '../../components/TextError'\nimport { prepareEntityImages } from '../../api/helpers/FileUploadHelper'\nimport { buildInitialValues } from '../Helper'\n\n// Solution\nimport ConfirmationModal from '../../components/ConfirmationModal'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\nimport TextSemiBold from '../../components/TextSemibold'\n\n\nexport default function EditRestaurantScreen({ navigation, route }) {\n  const [open, setOpen] = useState(false)\n  const [restaurantCategories, setRestaurantCategories] = useState([])\n  const [backendErrors, setBackendErrors] = useState()\n  // Solution\n  const [percentageShowDialog, setPercentageShowDialog] = useState(false)\n  const [restaurant, setRestaurant] = useState({})\n\n  // Solution\n  const [initialRestaurantValues, setInitialRestaurantValues] = useState({ name: null, description: null, address: null, postalCode: null, url: null, shippingCosts: null, email: null, phone: null, restaurantCategoryId: null, logo: null, heroImage: null, percentage: 0 })\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .max(255, 'Name too long')\n      .required('Name is required'),\n    address: yup\n      .string()\n      .max(255, 'Address too long')\n      .required('Address is required'),\n    postalCode: yup\n      .string()\n      .max(255, 'Postal code too long')\n      .required('Postal code is required'),\n    url: yup\n      .string()\n      .nullable()\n      .url('Please enter a valid url'),\n    shippingCosts: yup\n      .number()\n      .positive('Please provide a valid shipping cost value')\n      .required('Shipping costs value is required'),\n    email: yup\n      .string()\n      .nullable()\n      .email('Please enter a valid email'),\n    phone: yup\n      .string()\n      .nullable()\n      .max(255, 'Phone too long'),\n    restaurantCategoryId: yup\n      .number()\n      .positive()\n      .integer()\n      .required('Restaurant category is required'),\n    // Solution\n    percentage: yup\n      .number()\n      .max(5)\n      .min(-5)\n  })\n\n  useEffect(() => {\n    async function fetchRestaurantDetail() {\n      try {\n        const fetchedRestaurant = await getDetail(route.params.id)\n        const preparedRestaurant = prepareEntityImages(fetchedRestaurant, ['logo', 'heroImage'])\n        setRestaurant(preparedRestaurant)\n        const initialValues = buildInitialValues(preparedRestaurant, initialRestaurantValues)\n        setInitialRestaurantValues(initialValues)\n      } catch (error) {\n        showMessage({\n          message: `There was an error while retrieving restaurant details (id ${route.params.id}). ${error}`,\n          type: 'error',\n          style: GlobalStyles.flashStyle,\n          titleStyle: GlobalStyles.flashTextStyle\n        })\n      }\n    }\n    fetchRestaurantDetail()\n  }, [route])\n\n  useEffect(() => {\n    async function fetchRestaurantCategories() {\n      try {\n        const fetchedRestaurantCategories = await getRestaurantCategories()\n        const fetchedRestaurantCategoriesReshaped = fetchedRestaurantCategories.map((e) => {\n          return {\n            label: e.name,\n            value: e.id\n          }\n        })\n        setRestaurantCategories(fetchedRestaurantCategoriesReshaped)\n      } catch (error) {\n        showMessage({\n          message: `There was an error while retrieving restaurant categories. ${error} `,\n          type: 'error',\n          style: GlobalStyles.flashStyle,\n          titleStyle: GlobalStyles.flashTextStyle\n        })\n      }\n    }\n    fetchRestaurantCategories()\n  }, [])\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ExpoImagePicker.requestMediaLibraryPermissionsAsync()\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!')\n        }\n      }\n    })()\n  }, [])\n\n  const pickImage = async (onSuccess) => {\n    const result = await ExpoImagePicker.launchImageLibraryAsync({\n      mediaTypes: ExpoImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [1, 1],\n      quality: 1\n    })\n    if (!result.canceled) {\n      if (onSuccess) {\n        onSuccess(result)\n      }\n    }\n  }\n\n  const updateRestaurant = async (values) => {\n    setBackendErrors([])\n    // Solution\n    if (values.percentage > 0 && !percentageShowDialog) {\n      setPercentageShowDialog(true)\n    } else {\n      // Solution\n      setPercentageShowDialog(false)\n      try {\n        const updatedRestaurant = await update(restaurant.id, values)\n        showMessage({\n          message: `Restaurant ${updatedRestaurant.name} succesfully updated`,\n          type: 'success',\n          style: GlobalStyles.flashStyle,\n          titleStyle: GlobalStyles.flashTextStyle\n        })\n        navigation.navigate('RestaurantsScreen', { dirty: true })\n      } catch (error) {\n        console.log(error)\n        setBackendErrors(error.errors)\n      }\n    }\n  }\n\n  return (\n    <Formik\n      enableReinitialize\n      validationSchema={validationSchema}\n      initialValues={initialRestaurantValues}\n      onSubmit={updateRestaurant}>\n      {({ handleSubmit, setFieldValue, values }) => (\n        <ScrollView>\n          <View style={{ alignItems: 'center' }}>\n            <View style={{ width: '60%' }}>\n              <InputItem\n                name='name'\n                label='Name:'\n              />\n              <InputItem\n                name='description'\n                label='Description:'\n              />\n              <InputItem\n                name='address'\n                label='Address:'\n              />\n              <InputItem\n                name='postalCode'\n                label='Postal code:'\n              />\n              <InputItem\n                name='url'\n                label='Url:'\n              />\n              <InputItem\n                name='shippingCosts'\n                label='Shipping costs:'\n              />\n\n              {/* Solution */}\n              <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center', marginTop: 10, marginBottom: 10 }} >\n                <Pressable onPress={() => {\n                  setFieldValue('percentage', values.percentage + 0.005)\n                }}>\n                  <MaterialCommunityIcons\n                    name={'arrow-up-circle'}\n                    color={GlobalStyles.brandSecondaryTap}\n                    size={24}\n                  />\n                </Pressable>\n\n                <TextSemiBold>Porcentaje actual: <TextSemiBold textStyle={{ color: GlobalStyles.brandPrimary }}>{values.percentage * 100.0}%</TextSemiBold></TextSemiBold>\n\n                <Pressable onPress={() => {\n                  setFieldValue('percentage', values.percentage - 0.005)\n                }}>\n                  <MaterialCommunityIcons\n                    name={'arrow-down-circle'}\n                    color={GlobalStyles.brandSecondaryTap}\n                    size={24}\n                  />\n                </Pressable>\n              </View>\n\n              <InputItem\n                name='email'\n                label='Email:'\n              />\n              <InputItem\n                name='phone'\n                label='Phone:'\n              />\n\n              <DropDownPicker\n                open={open}\n                value={values.restaurantCategoryId}\n                items={restaurantCategories}\n                setOpen={setOpen}\n                onSelectItem={item => {\n                  setFieldValue('restaurantCategoryId', item.value)\n                }}\n                setItems={setRestaurantCategories}\n                placeholder=\"Select the restaurant category\"\n                containerStyle={{ height: 40, marginTop: 20 }}\n                style={{ backgroundColor: GlobalStyles.brandBackground }}\n                dropDownStyle={{ backgroundColor: '#fafafa' }}\n              />\n              <ErrorMessage name={'restaurantCategoryId'} render={msg => <TextError>{msg}</TextError>} />\n\n              <Pressable onPress={() =>\n                pickImage(\n                  async result => {\n                    await setFieldValue('logo', result)\n                  }\n                )\n              }\n                style={styles.imagePicker}\n              >\n                <TextRegular>Logo: </TextRegular>\n                <Image style={styles.image} source={values.logo ? { uri: values.logo.assets[0].uri } : restaurantLogo} />\n              </Pressable>\n\n              <Pressable onPress={() =>\n                pickImage(\n                  async result => {\n                    await setFieldValue('heroImage', result)\n                  }\n                )\n              }\n                style={styles.imagePicker}\n              >\n                <TextRegular>Hero image: </TextRegular>\n                <Image style={styles.image} source={values.heroImage ? { uri: values.heroImage.assets[0].uri } : restaurantBackground} />\n              </Pressable>\n\n              {backendErrors &&\n                backendErrors.map((error, index) => <TextError key={index}>{error.param}-{error.msg}</TextError>)\n              }\n\n              <Pressable\n                onPress={handleSubmit}\n                style={({ pressed }) => [\n                  {\n                    backgroundColor: pressed\n                      ? GlobalStyles.brandSuccessTap\n                      : GlobalStyles.brandSuccess\n                  },\n                  styles.button\n                ]}>\n                <View style={[{ flex: 1, flexDirection: 'row', justifyContent: 'center' }]}>\n                  <MaterialCommunityIcons name='content-save' color={'white'} size={20} />\n                  <TextRegular textStyle={styles.text}>\n                    Save\n                  </TextRegular>\n                </View>\n              </Pressable>\n            </View>\n          </View>\n          {/* Solution */}\n          <ConfirmationModal\n            isVisible={percentageShowDialog}\n            onCancel={() => setPercentageShowDialog(false)}\n            onConfirm={() => updateRestaurant(values)}>\n          </ConfirmationModal>\n        </ScrollView>\n      )}\n    </Formik>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderRadius: 8,\n    height: 40,\n    padding: 10,\n    width: '100%',\n    marginTop: 20,\n    marginBottom: 20\n  },\n  text: {\n    fontSize: 16,\n    color: 'white',\n    textAlign: 'center',\n    marginLeft: 5\n  },\n  imagePicker: {\n    height: 40,\n    paddingLeft: 10,\n    marginTop: 20,\n    marginBottom: 80\n  },\n  image: {\n    width: 100,\n    height: 100,\n    borderWidth: 1,\n    alignSelf: 'center',\n    marginTop: 5\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}